plot(rexp(40,0.2))
plot(rexp(40,0.2))
plot(rexp(40,0.2))
plot(rexp(40,0.2))
hist(rexp(40,0.2))
?apply
plot(rexp(40*1000,0.2))
for (1 in 1 : 1000) sampleMeans <- c(sampleMeans,mean(rexp(40,0.2)))
for (i in 1 : 1000) sampleMeans <- c(sampleMeans,mean(rexp(40,0.2)))
sampleMeans <- NULL
for (i in 1 : 1000) sampleMeans <- c(sampleMeans,mean(rexp(40,0.2)))
hist(sampleMeans)
m <- matrix(rexp(1000*40,0.2),40,1000)
hist(means(m))
hist(mean(m))
hist(apply(m,1,mean))
m <- matrix(rexp(1000*40,0.2),1000,40)
hist(apply(m,1,mean))
set.seed(2323)
lambda <- 0.2
numSim <- 1000
numObs <- 40
sampleMeans <- NULL
for (1 in 1 : numSim) sampleMeans <- c(sampleMeans,mean(rexp(numObs,lambda)))
set.seed(2323)
lambda <- 0.2
numSim <- 1000
numObs <- 40
sampleMeans <- NULL
for (i in 1 : numSim) sampleMeans <- c(sampleMeans,mean(rexp(numObs,lambda)))
hist(sampleMeans)
The purpose of this project is to use R to examine the exponential distribution and compare it with the Central Limit Theorem. An exponential distribution can be simulated in R using the command \inlinecode{rexp(n, lambda)} where \emph{n} is the number of observations and \emph{lambda} is the rate parameter. Both the mean {\textmu} and the standard deviation {\textsigma} of an exponential distribution are \emph{1/lambda}.
geom_histogram(bins=40)+
ggplot()+
aes(sample_means)+
geom_histogram(bins=40)+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red"))
ggplot()+
aes(sample_means)+
geom_histogram(bins=40)+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red"))
ggplot()+
aes(sample_means)+
geom_histogram(bins=40)+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red")
library(ggplot2)
ggplot()+
aes(sample_means)+
geom_histogram(bins=40)+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red")
sample_mean <- mean(sample_means)
set.seed(1212)
lambda <- 0.2
num_sims <- 1000
num_obs <- 40
sample_means <- NULL
for (i in 1 : num_sims)
sample_means <- c(sample_means,mean(rexp(num_obs,lambda)))
sample_mean <- mean(sample_means)
theoretical_mean <- 1/lambda
ggplot()+
aes(sample_means)+
geom_histogram(bins=40)+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red")
ggplot()+
aes(sample_means)+
geom_histogram(bins=40,fill="white")+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red")
ggplot()+
aes(sample_means)+
geom_histogram(bins=40,fill="white",colour="black")+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red")
ggplot()+
aes(sample_means)+
geom_histogram(bins=25,fill="white",colour="black")+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red")
ggplot()+
aes(sample_means)+
geom_histogram(bins=35,fill="white",colour="black")+
geom_vline(xintercept = sample_mean, colour="blue")+
geom_vline(xintercept = theoretical_mean, colour="red")
The purpose of this project is to use R to examine the exponential distribution and compare it with the Central Limit Theorem. An exponential distribution can be simulated in R using the command \inlinecode{rexp(n, lambda)} where \emph{n} is the number of observations and \emph{lambda} {\textlambda} is the rate parameter. Both the mean {\textmu} and the standard deviation {\textsigma} of an exponential distribution are given by \emph{1/{\textlambda}}.
geom_density(alpha=.2, fill="#FF6666")+
)
density((sample_means))
plot(density(sample_means))
mdf <- data.frame(sample_means)
View(mdf)
rnorm(10)
rnorm(10)
set.seed(123)
rnorm(10)
rnorm(10)
hist(runif(1000))
hist(rexp(1000,0.2))
hist(rexp(1000,0.2))
hist(rexp(1000,0.2))
rexp(100,0.2)
install.package("car")
install.packages("car")
?qqplot
library(car)
?qqPlot
library(datasets)
data("ToothGrowth")
orange_Juice <- subset(ToothGrowth, supp = "OJ")
vitamin_C <- subset(ToothGrowth, supp = "VC")
var(orange_Juice$len)
var(vitamin_C$len)
View(vitamin_C)
orange_Juice <- subset(ToothGrowth, supp == "OJ")
vitamin_C <- subset(ToothGrowth, supp == "VC")
var(orange_Juice$len)
var(vitamin_C$len)
?ToothGrowth
View(vitamin_C)
View(vitamin_C)
J = ToothGrowth$len[ToothGrowth$supp == 'OJ']
VC = ToothGrowth$len[ToothGrowth$supp == 'VC']
\usepackage{fullpage}
library(datasets)
?t.test
?apply
dosages <- unique(ToothGrowth$dose)
class(dosages)
orange_juice <- ToothGrowth$len[ToothGrowth$supp == "OJ"]
vitamin_c <- ToothGrowth$len[ToothGrowth$supp == "VC"]
orange_juice <- ToothGrowth[ToothGrowth$supp == "OJ"]
vitamin_c <- ToothGrowth[ToothGrowth$supp == "VC"]
orange_juice <- ToothGrowth[ToothGrowth$supp == "OJ",]
vitamin_c <- ToothGrowth[ToothGrowth$supp == "VC",]
t.test(vc[vc$dose==dosage,],oj[oj$dose==dosage,],paired = FALSE,var.equal = FALSE)
oj[oj$dose == 0.5]
oj <- ToothGrowth[ToothGrowth$supp == "OJ",]
vc <- ToothGrowth[ToothGrowth$supp == "VC",]
oj <- ToothGrowth[ToothGrowth$supp == "OJ",]
oj[oj$dose == 0.5]
oj[oj$dose == 0.5 ]
oj[oj$dose == 0.5, ]
for (dosage in dosages) {
t.test(vc[vc$dose==dosage,]$len,oj[oj$dose==dosage,]$len,paired = FALSE,var.equal = FALSE)
}
test <- t.test(vc[vc$dose==0.5,]$len,oj[oj$dose==0.5,]$len,paired = FALSE,var.equal = FALSE)
test
test[1]
test[2]
test[3]
test[3]$p.value
test.[1]$statistic + test[3]$p.value
test[1]$statistic + test[3]$p.value
test[3]$p.value
test[1]$statistic
?t.test
t.test(vc[vc$dose==1,]$len,oj[oj$dose==1,]$len,paired = FALSE,var.equal = FALSE)
t.test(vc[vc$dose==2,]$len,oj[oj$dose==2,]$len,paired = FALSE,var.equal = FALSE)
qplot(factor(dose), len, data = ToothGrowth, geom = "violin")
library(ggplot2)
qplot(factor(dose), len, data = ToothGrowth, geom = "violin")
print(ggplot(data=ToothGrowth)+geom_violin()+aes(dose, len)+facet_grid(~supp)
ggplot()
ggplot(data=ToothGrowth)+geom_violin()+aes(dose, len)+facet_grid(~supp)
head(ToothGrowth)
p<-ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE)
p
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_violin(trim=FALSE, fill='#A4A4A4', color="darkred")+
geom_boxplot(width=0.1) + theme_minimal()
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_violin(trim=FALSE, fill='#A4A4A4', color="darkred")+
geom_boxplot(width=0.1) + theme_minimal()
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_violin(trim=FALSE, fill=dose, color="darkred")+
geom_boxplot(width=0.1) + theme_minimal()
ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE, fill=dose, color="darkred")+
geom_boxplot(width=0.1) + theme_minimal()
ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE, color="darkred")+
geom_boxplot(width=0.1) + theme_minimal()
ggplot(ToothGrowth,aes(x = dose,y = len,fill = dose))
+geom_violin(trim = FALSE)
+xlab("Dose")+ylab("Odontoblast Length")
+geom_boxplot(width=0.2)
+facet_grid(~supp))
ggplot(ToothGrowth,aes(x = dose,y = len,fill = dose))
+geom_violin(trim = FALSE)
+xlab("Dose")+ylab("Odontoblast Length")
+geom_boxplot(width=0.2)
+facet_grid(~supp)
data("HairEyeColor")
data("HairEyeColor")
head(HairEyeColor)
summary(HairEyeColor)
rm(HairEyeColor)
data("occupationalStatus")
head(occupationalStatus)
rm(occupationalStatus)
data("Orange")
dim(Orange)
View(Orange)
View(Orange)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))
+geom_violin(trim = FALSE)
+xlab("Age")+ylab("Circumference")
+geom_boxplot(width=0.2)
+facet_grid(~Tree)
library(ggplot2)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))
+geom_violin(trim = FALSE)
+xlab("Age")+ylab("Circumference")
+geom_boxplot(width=0.2)
+facet_grid(~Tree)
library(ggplot2)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))
+geom_violin(trim = FALSE)
+xlab("Age")+ylab("Circumference")
+geom_boxplot(width=0.2)
+facet_grid(~as.numeric(Tree))
library(ggplot2)
Orange$Tree <- as.numeric(Orange$Tree)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))
+geom_violin(trim = FALSE)
+xlab("Age")+ylab("Circumference")
+geom_boxplot(width=0.2)
+facet_grid(~Tree)
library(ggplot2)
Orange$Tree <- as.characterOrange$Tree)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))
+geom_violin(trim = FALSE)
+xlab("Age")+ylab("Circumference")
+geom_boxplot(width=0.2)
+facet_grid(~Tree)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))
+geom_violin(trim = FALSE)
+xlab("Age")+ylab("Circumference")
+geom_boxplot(width=0.2)
data("ToothGrowth")
summary(ToothGrowth)
data("Orange")
summary(Orange)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))
+geom_violin(trim = FALSE)
+xlab("Age")+ylab("Circumference")
+geom_boxplot(width=0.2)
+facet_grid(~Tree)
library(ggplot2)
Orange$Tree <- as.characterOrange$Tree)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))+
+geom_violin(trim = FALSE)+
+xlab("Age")+ylab("Circumference")+
+geom_boxplot(width=0.2)+
+facet_grid(~Tree)
library(ggplot2)
Orange$Tree <- as.characterOrange$Tree)
ggplot(Orange,aes(x = age,y = circumference, fill = Tree))+
geom_violin(trim = FALSE)+
xlab("Age")+ylab("Circumference")+
geom_boxplot(width=0.2)+
facet_grid(~Tree)
density(Orange[Tree == 1,])
density(Orange[Orange$Tree == 1,])
density(Orange[Orange$Tree == 1,]$circumference)
plot(density(Orange[Orange$Tree == 1,]$circumference))
plot(Orange[Orange$Tree == 1,]$age,Orange[Orange$Tree == 1,]$circumference)
plot(Orange[Orange$Tree == 2,]$age,Orange[Orange$Tree == 2,]$circumference)
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week2 <- c(132,135,151,146,130)
examinations <- data.frame(subject, baseline, week2)
examinations
test <- t.test(x = examinations$baseline, y = examinations$week2, alt = "two.sided", paired = TRUE)
pval <- test$p.value
round(pval,3)
n <- 9
μ <- 1100
σ <- 30
quantile = 0.975 # is 95% with 2.5% on both sides of the range
confidenceInterval = μ + c(-1, 1) * qt(quantile, df=n-1) * σ / sqrt(n)
confidenceInterval
n <- 4
x <- 3
test <- binom.test(x=x, n=n, alt="greater")
round(test$p.value,2)
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm)
boxplot(ppm,col="blue")
abline(h=12)
hist(ppm)
hist(ppm, col="green")
rug(ppm)
low(ppm)
low
high
hist,ppm,col="green",breaks=100)
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(12,lwd=2)
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=4,col="magenta")
abline(v=median(ppm),col="magenta",lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg,col="wheat",main="Number of Counties in Each Region")
boxplot(pm25~region, pm25~region, col = "red")
boxplot(pm25~region, data=pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25)
hist(east$pm25,col="green")
hist(subset(pollution,region=="west"),col="green")
hist(subset(pollution,region=="west")$pm25,col="green")
p
plot(pollution,pm25)
plot(data=pollution,pm25)
with(pollution,plot(latitude,pm25))
abline(12,lwd=2,lty=2)
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$ppm,col=pollution$region)
plot(pollution$latitude,ppm, col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow=c(1,2),mar=c(5,4,2,1))
west <- subset(pollution, region=="west")
plot(west$latitude,west$pm25,main="West")
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.off()
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title("Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file="geyserplot.png")
png.close()
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
range(airquality$Ozone,na.rm = TRUE)
hist(airquality$Ozone)
dev.cur()
dev.off()
swirl()
hist(airquality$Ozone)
swirl()
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality,xlab="Month,ylab="Ozone (ppb),col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month,ylab="Ozone (ppb)"",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month,ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red")
boxplot(Ozone~Month,airquality,xlab="Month",ylab="Ozone (ppb)",col.axis="blue",col.lab="red",main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality,plot(wind,ozone))
with(airquality,plot(Wind,Ozone))
title(main="Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par()$fg
(?pch)
?pch
e
q
par()$pch
par("lty")
plot(airquality$Wind,airquality$Ozone,type="n")
title(main="Ozone and Wind in NYC")
title(main="Wind and Ozone in NYC")
may <- subset(airquality,airquality$Month == 5)
may <- subset(airquality,Month == 5)
plot(May$Wind,May$Ozone,pch=2)
plot(may$Wind,may$Ozone,pch=2)
plot(may$Wind,may$Ozone,col="blue",pch=17)
plot(may$Wind,may$Ozone,col="blue",pch=17)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality,Month != 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=4)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend(topright,c(17,8,),c("blue","red"),c("May","Other Months"))
legend("topright",c(17,8,),c("blue","red"),c("May","Other Months"))
legend("topright",c(17,8),c("blue","red"),c("May","Other Months"))
legend("topright",c(17,8),c("blue","red"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind,airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone,airquality$Solar.R,main = "Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City",outer=TRUE)
packages <- c("downloader", "dplyr", "Hmisc", "lme4", "arm", "lattice", "lavaan")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
## Set the working directory
oldwd <- getwd()
setwd("/Volumes/Main/github/ExData_Plotting1") ## replace with your preferred working directory
## Download the zipped data to the working directory and unzip
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
filename <- basename(url)
download.file(url, filename)
data <- read.table(unzi(filename),sub("^([^.]*).*", "\\1", filename)+".txt" )
data <- read.table(unz(filename),sub("^([^.]*).*", "\\1", filename)+".txt" )
filename <- basename(url)
download.file(url, filename)
data <- read.table(unz(filename),sub("^([^.]*).*", "\\1", filename)+".txt" )
unlink(filename)
packages <- c("downloader", "dplyr", "Hmisc", "lme4", "arm", "lattice", "lavaan")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
install.packages(setdiff(packages, rownames(installed.packages())))
}
## Set the working directory
oldwd <- getwd()
setwd("/Volumes/Main/github/ExData_Plotting1") ## replace with your preferred working directory
## Download the zipped data to the working directory and unzip
url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
filename <- basename(url)
download.file(url, filename)
data <- read.table(unz(filename),"household_power_consumption.txt" )
unlink(filename)
url <- "https://d396qusza40orc.cloudfront.net/exdata/data/household_power_consumption.zip"
filename <- basename(url)
data <- read.table(unz(filename),"household_power_consumption.txt" )
?read.table
?read.table.url
?read.table
url <- "https://d396qusza40orc.cloudfront.net/exdata/data/household_power_consumption.zip"
filename <- basename(url)
download.file(url, filename)
data <- read.table(unz(filename),"household_power_consumption.txt" )
?unz
setwd("/Volumes/Main/github/ExData_Plotting1/") ## replace with your preferred working directory
oldwd <- getwd()
?paste
filename <- paste(wd,basename(url),sep="/")
wd <- "/Volumes/Main/github/ExData_Plotting1/"
url <- "https://d396qusza40orc.cloudfront.net/exdata/data/household_power_consumption.zip"
filename <- paste(wd,basename(url),sep="/")
data <- read.table(unz(filename),"household_power_consumption.txt" )
data <- read.table(filename=unz(filename),"household_power_consumption.txt" )
?read.table
data <- read.table(unz(filename),filename="household_power_consumption.txt" )
data <- read.table(unz(zipfile,filename="household_power_consumption.txt" ))
zipfile <- paste(wd,basename(url),sep="/")
data <- read.table(unz(zipfile,filename="household_power_consumption.txt" ))
rm(east)
rm(west)
rm(state)
rm(pollution)
rm(list=ls())
url <- "https://d396qusza40orc.cloudfront.net/exdata/data/household_power_consumption.zip"
zipfile <- paste(wd,basename(url),sep="/")
data <- read.table(unz(zipfile,filename="household_power_consumption.txt" ))
zipfile <- paste(wd,basename(url),sep="/")
wd <- "/Volumes/Main/github/ExData_Plotting1/" ## replace with your preferred working directory
zipfile <- paste(wd,basename(url),sep="/")
data <- read.table(unz(zipfile,filename="household_power_consumption.txt" ))
data <- read.table(unz(zipfile,filename="household_power_consumption.txt",header=TRUE))
data <- read.table(unz(zipfile,filename="household_power_consumption.txt"), header=TRUE)
data <- read.table(unz(zipfile,filename="household_power_consumption.txt"), header=TRUE, sep=";")
with(data,barchart(Global_reactive_power,Frequency,col="red")
with(data,barchart(Global_reactive_power,Frequency,col="red"))
with(data,hist(Voltage))
with(data,hist(as.numeric(Voltage))
)
as.numeric(data$Voltage)
View(data)
View(data)
with(data,hist(Sub_metering_3))
